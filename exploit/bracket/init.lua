--[[
  === Bracket ===

  A sub-project of mollermethod.
]]

local OPTIONS = ...
local gui = OPTIONS.gui
local API = OPTIONS.api
local create = API.create
local Players = game:GetService'Players'
local types = {
	player = function(arg)
		if not #arg then
			return Players.LocalPlayer
		end
		for _, plr in pairs(Players:GetPlayers()) do
			if string.match(string.lower(plr.Name), '^' .. string.lower(arg)) then
				return plr
			end
		end
	end,
	players = function(arg)
		local players = {}
		for _, plr in pairs(Players:GetPlayers()) do
			if string.match(string.lower(plr.Name), '^' .. string.lower(arg)) then
				table.insert(players, plr)
			end
		end
		return players
	end,
	string = function()
		return arg
	end
}

local commands = {
	help = {
		description = 'Prints this help message.',
		aliases = { 'bracket' },
		arguments = {},
		run = function() end
	},
	age = {
		description = 'Get the account age of this player.',
		aliases = { 'accountage' },
		arguments = {
			player = {
				type = 'player',
				description = 'The player to get the age of.'
			}
		},
		run = function(args)
			local player = args.player
			local age = player.AccountAge
			API.notify{
				Text = player.Name .. "'s account is " .. age .. ' days old.',
				App = 'Bracket'
			}
		end
	}
}

local Frame = create'Frame'

local frame = Frame{
	Parent = gui,
	Name = 'Bracket',
	create'UIListLayout'{ Enum.SortOrder.LayoutOrder },
	BackgroundTransparency = 1,
	AnchorPoint = Vector2.new(0.5, 0),
	Position = UDim2.new(0.5, 0, 0.5, 10),
	Size = UDim2.new(0.8, 0, 0, 50),
	Enum.AutomaticSize.Y
}

local textframe = Frame{
	Size = UDim2.new(1, 0, 1, 50),
	BackgroundColor3 = Color3.fromRGB(47, 79, 79),
	create'UIListLayout'{
		Enum.SortOrder.LayoutOrder,
		Enum.FillDirection.Horizontal
	},
	create'UICorner'{ CornerRadius = UDim.new(0, 5) },
	API.pad(5),
	Padding = 5
}

function open()
end

function close()
end

function previous()
	-- todo: make it remove the tab character
end

function next()
	-- todo: make it remove the tab character
end
local is_open = false

game:GetService('UserInputService').InputBegan:Connect(function(i)
	if i.KeyCode == Enum.KeyCode.LeftBracket then
		is_open = not is_open
		if is_open then
			open()
		else
			close()
		end
	end
	if game:GetService('UserInputService'):GetFocusedTextBox():IsDescendantOf(
		frame
	) and i.KeyCode == Enum.KeyCode.Tab then
		if i:IsModifierKeyDown(Enum.ModifierKey.Shift) then
			previous()
		else
			next()
		end
	end
end)
