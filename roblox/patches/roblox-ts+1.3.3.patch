# generated by patch-package 6.4.11
#
# command:
#   npx patch-package roblox-ts
#
# declared package:
#   roblox-ts: 1.3.3
#
diff --git a/node_modules/roblox-ts/out/TSTransformer/nodes/expressions/transformConditionalExpression.js b/node_modules/roblox-ts/out/TSTransformer/nodes/expressions/transformConditionalExpression.js
index 1883722..981f127 100644
--- a/node_modules/roblox-ts/out/TSTransformer/nodes/expressions/transformConditionalExpression.js
+++ b/node_modules/roblox-ts/out/TSTransformer/nodes/expressions/transformConditionalExpression.js
@@ -4,49 +4,38 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.transformConditionalExpression = void 0;
-const luau_ast_1 = __importDefault(require("@roblox-ts/luau-ast"));
+const LuauAST_1 = __importDefault(require("@roblox-ts/luau-ast"));
 const transformExpression_1 = require("./transformExpression");
 const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
-const isUsedAsStatement_1 = require("../../util/isUsedAsStatement");
-const wrapExpressionStatement_1 = require("../../util/wrapExpressionStatement");
+const types_1 = require("../../util/types");
 function transformConditionalExpression(state, node) {
     const condition = (0, transformExpression_1.transformExpression)(state, node.condition);
     const [whenTrue, whenTruePrereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, node.whenTrue));
     const [whenFalse, whenFalsePrereqs] = state.capture(() => (0, transformExpression_1.transformExpression)(state, node.whenFalse));
-    if ((0, isUsedAsStatement_1.isUsedAsStatement)(node)) {
-        luau_ast_1.default.list.pushList(whenTruePrereqs, (0, wrapExpressionStatement_1.wrapExpressionStatement)(whenTrue));
-        luau_ast_1.default.list.pushList(whenFalsePrereqs, (0, wrapExpressionStatement_1.wrapExpressionStatement)(whenFalse));
-        state.prereq(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
-            condition: (0, createTruthinessChecks_1.createTruthinessChecks)(state, condition, node.condition),
-            statements: whenTruePrereqs,
-            elseBody: whenFalsePrereqs,
-        }));
-        return luau_ast_1.default.none();
+    const type = state.getType(node.whenTrue);
+    if (!(0, types_1.isPossiblyType)(type, t => (0, types_1.isBooleanLiteralType)(state, t, false)) &&
+        !(0, types_1.isPossiblyType)(type, t => (0, types_1.isUndefinedType)(t)) &&
+        LuauAST_1.default.list.isEmpty(whenTruePrereqs) &&
+        LuauAST_1.default.list.isEmpty(whenFalsePrereqs)) {
+        return LuauAST_1.default.binary(LuauAST_1.default.binary((0, createTruthinessChecks_1.createTruthinessChecks)(state, condition, node.condition, state.getType(node.condition)), "and", whenTrue), "or", whenFalse);
     }
-    if (luau_ast_1.default.list.isEmpty(whenTruePrereqs) && luau_ast_1.default.list.isEmpty(whenFalsePrereqs)) {
-        return luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfExpression, {
-            condition: (0, createTruthinessChecks_1.createTruthinessChecks)(state, condition, node.condition),
-            expression: whenTrue,
-            alternative: whenFalse,
-        });
-    }
-    const tempId = luau_ast_1.default.tempId("result");
-    state.prereq(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.VariableDeclaration, {
+    const tempId = LuauAST_1.default.tempId("result");
+    state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.VariableDeclaration, {
         left: tempId,
         right: undefined,
     }));
-    luau_ast_1.default.list.push(whenTruePrereqs, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
+    LuauAST_1.default.list.push(whenTruePrereqs, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
         left: tempId,
         operator: "=",
         right: whenTrue,
     }));
-    luau_ast_1.default.list.push(whenFalsePrereqs, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
+    LuauAST_1.default.list.push(whenFalsePrereqs, LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.Assignment, {
         left: tempId,
         operator: "=",
         right: whenFalse,
     }));
-    state.prereq(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
-        condition: (0, createTruthinessChecks_1.createTruthinessChecks)(state, condition, node.condition),
+    state.prereq(LuauAST_1.default.create(LuauAST_1.default.SyntaxKind.IfStatement, {
+        condition,
         statements: whenTruePrereqs,
         elseBody: whenFalsePrereqs,
     }));
